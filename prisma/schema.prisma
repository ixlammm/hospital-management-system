// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Patient {
  id         String  @id @default(uuid())
  userId     String? @unique
  name       String
  age        Int
  gender     Gender
  contact    String
  email      String?  @unique
  address    String?
  status     String
  lastVisit  DateTime
  notes      String?
  appointments Appointment[]
  prescriptions Prescription[]
  radio      Radio[]
  samples    Sample[]
  analyses   Analysis[]
  archives   Archive[]
  invoices   Invoice[]
  ibe_a     String?
  ibe_r     String?
  user           User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Staff {
  id             String  @id @default(uuid())
  userId         String? @unique
  name           String
  role           UserRole
  status         String
  contact        String
  email          String  @unique
  joined         DateTime
  gender         Gender?
  address        String?
  notes          String?
  user           User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  a_hex          String?
  r_encrypted    String?
  appointments   Appointment[]
  prescriptions  Prescription[]
  radio          Radio[]
  samples        Sample[]
  analyses       Analysis[]
  research       Research[]
  invoices       Invoice[]
  monthlyReports MonthlyReport[]
}

enum UserRole {
  admin
  reception
  medecin
  infirmier
  radiologue
  laborantin
  comptable
  patient
}

enum Gender {
  male
  female
}

model Appointment {
  id          String  @id @default(uuid())
  patientId   String
  doctorId    String
  date        DateTime
  time        String
  status      String
  type        String
  duration    String?
  description String?
  notes       String?

  patient     Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  staff       Staff   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model Prescription {
  id              String  @id @default(uuid())
  date            DateTime
  description     String
  patientId       String
  doctorId        String
  patient         Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  staff           Staff   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model Sample {
  id              String  @id @default(uuid())
  date            DateTime
  observation     String
  temperature     Float
  bloodPressure   String
  heartRate       Int
  patientId       String
  doctorId        String
  patient         Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  staff           Staff   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model Radio {
  id              String  @id @default(uuid())
  date            DateTime
  type            String
  result          String
  patientId       String
  doctorId        String
  patient         Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  staff           Staff   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model Analysis {
  id              String  @id @default(uuid())
  date            DateTime
  exam            String
  details         String
  patientId       String
  doctorId        String
  patient         Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  staff           Staff   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model Research {
  id              String  @id @default(uuid())
  doctorId        String 
  date            DateTime
  subject         String
  description     String
  staff           Staff   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model Archive {
  id              String  @id @default(uuid())
  patientId       String
  date            DateTime
  patient         Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model Invoice {
  id              String  @id @default(uuid())
  patientId       String
  doctorId        String
  date            DateTime
  amount          Float
  status          String
  patient         Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  staff           Staff   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model MonthlyReport {
  id              String  @id @default(uuid())
  month           Int
  revenue         Float
  expenses        Float
  profit          Float
  staffId         String
  comments        String?
  staff           Staff   @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  pswdHash      String
  email         String          @unique
  accounts      Account[]
  sessions      Session[]
  staff         Staff?
  patient       Patient?
  role          UserRole
  createdAt DateTime @default(now())
  passwordChanged Boolean @default(false)
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}


model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  }

  model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model ibe {
  n      String @id
  p      String
  q      String
}